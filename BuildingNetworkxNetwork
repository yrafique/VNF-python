#Building a Network with Network

#1. Convert XML Network Dictionary into a networkx graph
#2. Create a 3 server, linked network and run shortest path
#3. Implement Random Placement Algorithm

import networkx as nx

import matplotlib.pyplot as plt

from ImportNetworkFromXML import *




def convert_nodes (G, nodes):
    for node in nodes:
        node_id = nodes[node].get("id")
        x_cor = nodes[node].get("x_cor")
        y_cor = nodes[node].get("y_cor")
        G.add_node(node_id, pos=(x_cor, y_cor))

def convert_links (G, nodes, links):
    for link in links.keys():
        source = links[link].get("source")
        for source_node in nodes:
            if nodes[source_node].get('id') == source:
                break
        dest = links[link].get("destination")
        for dest_node in nodes:
            if nodes[dest_node].get('id') == dest:
                break
        capacity = links[link].get("capacity")
        cost = links[link].get("cost")
        G.add_edges_from([(source, dest, {'capacity': capacity, 'cost': cost})])

def convert_demands(G, nodes, demands):    
    a = 1




def read_network(network_name):
    G = nx.Graph()
    path = 'Networks/'
    options = ['abilene.xml' , 'janos-us.xml', 'brain.xml']
    s = path+network_name
    print(s)
    #network_name = options[2]
    from_xml = read_XMLnetwork(path+network_name)

    nodes = from_xml[0]
    links = from_xml[1]
    demands = from_xml[2]

    #Test the imported networks
    #print_test(network_name,nodes,links,demands)

    convert_nodes(G,nodes)
    convert_links(G,nodes,links)
    convert_demands(G,nodes,demands)

    

    return G


G = read_network("abilene.xml")

nx.draw(G, nx.get_node_attributes(G, 'pos'), with_labels=True, node_size=0)
#print(nx.dijkstra_path(G,'UP10', 'ADH10'))


# final all shortest path pairs
sp = dict(nx.all_pairs_shortest_path(G))
#print(sp)


#print network info
print(nx.info(G))

#%timeit nx.closeness_centrality(G)

